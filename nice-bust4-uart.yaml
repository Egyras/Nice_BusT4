#отправляет пакеты через uart в шину Nice BUS T4
#тест на Wemos D1 mini

substitutions:
  device_name: "nice-bust4-uart"
  


esphome:
  name: ${device_name}
  platform: ESP8266
  board: d1_mini


external_components:
  - source:
      type: git
      url: https://github.com/pruwait/Nice_BusT4
#  - source: my_components


# включаем отладку для поиска причины перезагрузки через лог
debug:
    
# Enable logging
logger:
  level: DEBUG
#  level: VERBOSE
  baud_rate: 0
  
# Enable Home Assistant API
api:
  services:
# для отправки hex команд на привод
  - service: raw_command
    variables:
        raw_cmd: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_raw_cmd(raw_cmd);
# для генерирования и отправки inf команд на привод         
  - service: send_inf_command
    variables:
       to_addr: string
       whose: string
       command: string
       type_command: string
       data_on: bool
       data_command: string
       
         
    then:
      lambda: |-
        std::vector < uint8_t > v_to_addr = my_nice_cover -> NiceBusT4::raw_cmd_prepare (to_addr);
        std::vector < uint8_t > v_whose = my_nice_cover -> NiceBusT4::raw_cmd_prepare (whose);
        std::vector < uint8_t > v_command = my_nice_cover -> NiceBusT4::raw_cmd_prepare (command);
        std::vector < uint8_t > v_type_command = my_nice_cover -> NiceBusT4::raw_cmd_prepare (type_command);
        std::vector < uint8_t > v_data_command = my_nice_cover -> NiceBusT4::raw_cmd_prepare (data_command);
        if (data_on) {
          my_nice_cover -> NiceBusT4::tx_buffer_.push(my_nice_cover -> NiceBusT4::gen_inf_cmd(v_to_addr[0], v_to_addr[1], v_whose[0], v_command[0], v_type_command[0], v_data_command, v_data_command.size()));
        } else {
          my_nice_cover -> NiceBusT4::tx_buffer_.push(my_nice_cover -> NiceBusT4::gen_inf_cmd(v_to_addr[0], v_to_addr[1], v_whose[0], v_command[0], v_type_command[0]));
        }
        


 
  reboot_timeout: 0s # иначе перезагружается при отключении от hassio  
  
ota:

# Set statul led for Wemos D1 mini
status_led:
  pin: 
    number: D4
    inverted: true
  


wifi:
  ssid: !secret wifi_ssid
  password:  !secret wifi_password

  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Hotspot"
    password: !secret ota_pass



captive_portal:


# Enable web server (can be disabled)
web_server:
  port: 80
  



button:
  - platform: template
    name: SBS 
    id: send_sbs
    on_press:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_raw_cmd("55 0c 00 ff 00 66 01 05 9D 01 82 01 64 E6 0c");
           
        

#uart:
#  id: uart_bus
#  tx_pin: 1
#  rx_pin: 3
#  baud_rate: 19200

cover:
- platform: bus_t4
  name: "Nice RB500HS"
  id: my_nice_cover
  address: 0x0003            # адрес привода
  use_address: 0x0081        # адрес шлюза


